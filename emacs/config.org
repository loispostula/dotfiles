
#+AUTHOR: Loïs Postula
#+TITLE: GNU Emacs Configuration

* Table of Contents  :TOC:
- [[#configuration-profiling][Configuration Profiling]]
- [[#general-settings][General Settings]]
  - [[#start-of-week-is-monday][Start of week is Monday]]
  - [[#truncate-lines][Truncate Lines]]
  - [[#visual-line-mode][Visual line mode]]
  - [[#append-and-update-time-stamps-for-time-stamp--in-headers][Append and update time-stamps for =Time-stamp: <>= in headers]]
  - [[#inhibit-startup-screen][Inhibit Startup Screen]]
  - [[#make-cursor-the-width-of-the-character-it-is-under-ie-full-width-of-a-tab][Make cursor the width of the character it is under; i.e. full width of a TAB:]]
  - [[#yes-or-no-p-prefer-yn][yes-or-no-p: prefer y/n]]
  - [[#avoid-the-ensure-keyword-for-each-package][Avoid the =:ensure= keyword for each package]]
  - [[#only-one-window-at-startup][Only one window at startup]]
- [[#initialisation][Initialisation]]
  - [[#packages][Packages]]
- [[#no-littering][No Littering]]
- [[#logging][Logging]]
- [[#alerts][Alerts]]
- [[#binaries-lookup][Binaries Lookup]]
  - [[#lp-binary-foundbinaryname][lp-binary-found(binaryname)]]
  - [[#lp-binary-not-found-list-and-lp-eval-if-binary-or-warn][lp-binary-not-found-list and lp-eval-if-binary-or-warn()]]
  - [[#some-binary-test][Some binary test]]
- [[#theming][Theming]]
  - [[#general-appearance][General Appearance]]
  - [[#icons][Icons]]
  - [[#theme][Theme]]
  - [[#color-display-in-text][Color Display in Text]]
  - [[#nyan-scroll][Nyan Scroll]]
- [[#spelling][Spelling]]
  - [[#abbreviations][Abbreviations]]
  - [[#fly-spell][Fly Spell]]
  - [[#grammar-check][Grammar Check]]
- [[#minibuffer-completion][Minibuffer Completion]]
  - [[#install-vertico][Install vertico]]
  - [[#rich-annotation-in-vertico][Rich annotation in vertico]]
  - [[#icons-in-annotations][Icons in annotations]]
  - [[#better-ordering][Better Ordering]]
  - [[#consult][Consult]]
- [[#programming][Programming]]
  - [[#lsp][LSP]]
  - [[#lsp-ui][LSP-UI]]
  - [[#lsp-consult][LSP-Consult]]
  - [[#auto-completions][Auto-Completions]]
  - [[#indentations][Indentations]]
  - [[#languages-specific-settings][Languages Specific Settings]]
  - [[#kubernetes][Kubernetes]]
  - [[#documentation][Documentation]]
  - [[#projects][Projects]]
- [[#helper-functions][Helper functions]]
  - [[#lp-buffer-existsbufname][lp-buffer-exists(bufname)]]
- [[#ledger][Ledger]]
  - [[#emacs-setup][Emacs Setup]]
- [[#org-mode][Org mode]]
  - [[#load-orgmode][Load Orgmode]]
  - [[#start-configuration][Start Configuration]]
  - [[#general-configuration][General Configuration]]
  - [[#contacts][Contacts]]
  - [[#agenda][Agenda]]
  - [[#refilling][Refilling]]
  - [[#blogging][Blogging]]
  - [[#end-configuration][End Configuration]]
- [[#capture][Capture]]
- [[#email][Email]]
- [[#hydra][Hydra]]
  - [[#hydra--flycheck][Hydra / Flycheck]]
  - [[#hydra--goto-files][Hydra / Goto Files]]
  - [[#hydra--windows][Hydra / Windows]]
  - [[#hydra--org][Hydra / Org]]
  - [[#hydra--projectile][Hydra / Projectile]]
  - [[#hydra--ledger][Hydra / Ledger]]
- [[#dashboard][Dashboard]]
- [[#autostart][Autostart]]
- [[#closing-and-end-for-profiling][Closing and end for profiling]]

* Configuration Profiling
#+begin_src emacs-lisp
  (defvar lp-config-el-start-time (current-time) "Time when config.el was started")
#+end_src
* General Settings
** Start of week is Monday
#+BEGIN_SRC emacs-lisp
(setq-default calendar-week-start-day 1)
#+END_SRC
** Truncate Lines
#+begin_src emacs-lisp
(setq-default truncate-lines t)
#+end_src
** Visual line mode
#+begin_src emacs-lisp
(setq-default global-visual-line-mode t)
#+end_src
** Append and update time-stamps for =Time-stamp: <>= in headers
#+BEGIN_SRC emacs-lisp
(add-hook 'write-file-hooks 'time-stamp)
#+END_SRC
** Inhibit Startup Screen
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src
** Make cursor the width of the character it is under; i.e. full width of a TAB:
#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC
** yes-or-no-p: prefer y/n
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Avoid the =:ensure= keyword for each package 
#+begin_src emacs-lisp
(setq-default use-package-always-ensure t)
#+end_src
** Only one window at startup
#+begin_src emacs-lisp
  ;; Only one window on startup
  (add-hook 'emacs-startup-hook 'delete-other-windows t)
#+end_src
* Initialisation
** Packages
*** General Configuration
#+BEGIN_SRC emacs-lisp
  (setq package-user-dir (concat lp-user-emacs-directory "elpa"))
  (require 'package)
  (package-initialize)
#+END_SRC
*** Sources
**** Melpa
#+BEGIN_SRC emacs-lisp
  (setq package-archives '(
			    ("melpa" . "https://melpa.org/packages/")
			    ("gnu" . "https://elpa.gnu.org/packages/")
			    ("nongnu" . "https://elpa.nongnu.org/nongnu/")
			  ))
#+END_SRC
*** Initialisation
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(use-package use-package-ensure-system-package :ensure t)
#+END_SRC
*** Package Manager
#+BEGIN_SRC emacs-lisp
;; Bootstrap straight
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Integrates `straight' directly into the `use-package' package through the
;; `:straight' expression.
(straight-use-package 'use-package)
#+END_SRC
*** Default Packages
#+BEGIN_SRC emacs-lisp
(use-package request)
(use-package websocket)
#+END_SRC
* No Littering



Let's make sure Emac's is not polluting it's configuration directory

This is taken from [[https://github.com/novoid/dot-emacs/blob/master/config.org#no-littering][novoid's emacs configuration]] and https://github.com/tarsius/no-littering

It sets some default paths in order to separate automatically created
files and directories.

#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :load-path (lambda () (expand-file-name (concat lp-user-emacs-directory "contrib/no-littering/")))
  )
(require 'no-littering)
#+END_SRC
* Logging
#+begin_src emacs-lisp
 (setq lp-log-file (concat no-littering-var-directory "log/emacs.log"))
 (defun lp-log (message)
   (interactive)
   (let ((current-timestamp
        (concat
          (format-time-string "%Y-%m-%dT%T")
          ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
          (format-time-string "%z")))
        ))
  (write-region
    (concat (format-message "%s %s: %s\n" current-timestamp system-name message))
     nil lp-log-file "append"))
)
#+end_src
* Alerts
#+begin_src emacs-lisp
  (use-package alert
    :ensure t
    :config
     (setq alert-default-style 'libnotify)
     (setq alert-persist-idle-time 60)
     )
(defun my-alert (mymessage)
"wrapper for high-prio (sticky?) alert"
   (interactive)
   (when (not noninteractive)
     ;; only in interactive mode:

     (setq mymessage (concat mymessage "\n\n" (concat
         (format-time-string "%Y-%m-%dT%T")
         ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
             (format-time-string "%z")))))
     (message mymessage)
     (alert mymessage :severity 'high))
)

(defun my-flash (mymessage)
"wrapper for low-prio (non-sticky) alert flash"
   (interactive)
   (when (not noninteractive)
     ;; only in interactive mode:

     (setq mymessage (concat mymessage "\n\n" (concat
         (format-time-string "%Y-%m-%dT%T")
         ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
             (format-time-string "%z")))))
     (message mymessage)
     (alert mymessage))
)
#+end_src
* Binaries Lookup
Let's define functions that can help us locate a binary and output a warning if the binary is not found

This is taken from [[https://github.com/novoid/dot-emacs/blob/master/config.org#no-littering][novoid's emacs configuration]].

** lp-binary-found(binaryname)
=lp-binary-found(binaryname)= returns the path where a binary executable can be found within the exec-path.

It also checks certain operatin system/binary combinations which aren't likely in the exec-path
#+begin_src emacs-lisp
(defun lp-binary-found(binaryname)
  (cond
    (t
      (locate-file binaryname exec-path exec-suffixes 1))
  ))
#+end_src

** lp-binary-not-found-list and lp-eval-if-binary-or-warn()

=lp-eval-if-binary-or-warn (binaryname &optional warningtext)= checks if a binary can be found in the path via =lp-binary-found()=.

If not found, a warning message is printed which can be defined as an optional parameter as well. Additionally, the not found binaries are collected in the variable =lp-binary-not-found-list=. 
#+begin_src emacs-lisp
  (defvar lp-binary-not-found-list nil
    "Holds a list of binaries which could be not found via lp-eval-if-binary-or-warn()"
    )

  (defun lp-eval-if-binary-or-warn (binaryname &optional warningtext)
    (or warningtext (setq warningtext (concat "»»» I could not locate the PATH-binary for: " binaryname)))
    (let* ((binarypath (lp-binary-found binaryname)))
      (if binarypath
         ;; binary was found in exec-path
         (concat binarypath)
         (progn
	   ;; binary NOT found in exec-path:
	   (message warningtext)
	   (if lp-binary-not-found-list
	       (add-to-list 'lp-binary-not-found-list binaryname)
	       (setq lp-binary-not-found-list (list binaryname))
	       )
	   )
	   )))
#+end_src

** Some binary test
#+begin_src emacs-lisp
(lp-eval-if-binary-or-warn "firefox")
(lp-eval-if-binary-or-warn "grep")
(lp-eval-if-binary-or-warn "ls" "Could not find ls in path")
#+end_src

* Theming

** General Appearance
*** No tool bar, no scroll bar, no menu bar
#+begin_src emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+end_src
*** Window division
#+begin_src emacs-lisp
  (setq window-divider-default-places 'right-only
	window-divider-default-right-width 1)
  (set-face-attribute 'window-divider nil
		      :foreground (face-foreground 'default))
  (window-divider-mode +1)
#+end_src
** Icons
#+begin_src emacs-lisp
(use-package all-the-icons
  :if (display-graphic-p)
  :commands all-the-icons-install-fonts
  :config (unless (find-font (font-spec :name "all-the-icons"))
            (all-the-icons-install-fonts t)))
#+end_src
** Theme
 #+begin_src emacs-lisp
 (use-package doom-themes
   :config
   (load-theme 'doom-tomorrow-night t)
   (doom-themes-org-config))

 (use-package doom-modeline
   :init (doom-modeline-mode)
   :custom
   (doom-modeline-icon (display-graphic-p))
   (doom-modeline-mu4e t))

 (use-package solaire-mode
   :defer 0.1
   :custom (solaire-mode-remap-fringe t)
   :config (solaire-global-mode))
 #+end_src
** Color Display in Text
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :delight
    :hook ((prog-mode text-mode) . rainbow-mode))
#+end_src
** Nyan Scroll
#+begin_src emacs-lisp
  (use-package nyan-mode
    :ensure t ;; install package if not found OR: (setq use-package-always-ensure t)
    :init
    (setq nyan-bar-length 20);; reduce length on narrow upward/tilted display
    :config
    (nyan-mode t)
    )
#+end_src
* Spelling
** DONE Abbreviations
- State "DONE"       from "SOMEDAY"    [2022-01-13 do 14:50]
#+begin_src emacs-lisp
  (use-package abbrev
    :ensure nil
    :delight
    :hook (text-mode . abbrev-mode)
    :custom (abbrev-file-name (expand-file-name (concat lp-user-emacs-directory "abbrev_defs")))
    :config
    (if (file-exists-p abbrev-file-name)
	(quietly-read-abbrev-file)))
#+end_src
** Fly Spell
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :delight
    :hook ((text-mode . flyspell-mode)
	   (prog-mode . flyspell-prog-mode))
    :custom
    ;; Add correction to abbreviation table.
    (flyspell-abbrev-p t)
    (flyspell-default-dictionary "en_US")
    (flyspell-issue-message-flag nil)
    (flyspell-issue-welcome-flag nil)

    (use-package grammarly
      :load-path (lambda () (expand-file-name (concat lp-user-emacs-directory "contrib/grammarly")))
      :ensure t
      :config
      (
       (grammarly-username "lois@postu.la")
       (grammarly-password "PiL0KCKEdSlpwafAnkJO") 

       ))
    (use-package flycheck-grammarly
      :load-path (lambda () (expand-file-name (concat lp-user-emacs-directory "contrib/flycheck-grammarly/")))
      :ensure t
      ))
#+end_src
Keybindings
#+begin_src emacs-lisp
  ;; easy spell check
  (global-set-key (kbd "<f8>") 'ispell-word)
  (global-set-key (kbd "C-S-<f8>") 'flyspell-mode)
  (global-set-key (kbd "C-M-<f8>") 'flyspell-buffer)
  (global-set-key (kbd "C-<f8>") 'flyspell-check-previous-highlighted-word)
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)
    )
  (global-set-key (kbd "M-<f8>") 'flyspell-check-next-highlighted-word)
#+end_src
** Grammar Check
Grammar checking using ltex
#+begin_src emacs-lisp
  (use-package lsp-ltex
    :ensure t
    :hook (text-mode . (lambda ()
			 (require 'lsp-ltex)
		;	 (add-to-list 'lsp-language-id-configuration '(org-mode . "org"))
     (setq lsp-ltex-log-level "info")

			 (lsp))))  ; or lsp-deferred
#+end_src
* Minibuffer Completion
Mini buffer is where we type emacs commands
** Install vertico
#+begin_src emacs-lisp
  (use-package vertico
    :straight (:files (:defaults "extensions/*"))
    :init (vertico-mode)
    :bind (:map vertico-map
		("C-<backspace>" . vertico-directory-up))
    :custom (vertico-cycle t)
    :custom-face (vertico-current ((t (:background "#1d1f21")))))
#+end_src
** Rich annotation in vertico
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :init (marginalia-mode)
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+end_src
** Icons in annotations
#+begin_src emacs-lisp
  (use-package all-the-icons-completion
    :after (marginalia all-the-icons)
    :hook (marginalia-mode . all-the-icons-completion-marginalia-setup))
#+end_src
** Better Ordering
#+begin_src emacs-lisp
  (use-package orderless
    :custom
    (completion-category-defaults nil)
    (completion-category-overrides '((file (styles . (partial-completion)))))
    (completion-styles '(orderless)))
#+end_src
** Consult
#+begin_src emacs-lisp
  (use-package consult
    :after projectile
    :bind  (;; Related to the control commands.
	    ("<help> a" . consult-apropos)
	    ("C-x b" . consult-buffer)
	    ("C-x M-:" . consult-complex-command)
	    ("C-c k" . consult-kmacro)
	    ;; Related to the navigation.
	    ("M-g a" . consult-org-agenda)
	    ("M-g e" . consult-error)
	    ("M-g g" . consult-goto-line)
	    ("M-g h" . consult-org-heading)
	    ("M-g i" . consult-imenu)
	    ("M-g k" . consult-global-mark)
	    ("M-g l" . consult-line)
	    ("M-g m" . consult-mark)
	    ("M-g o" . consult-outline)
	    ("M-g I" . consult-project-imenu)
	    ;; Related to the search and selection.
	    ("M-s G" . consult-git-grep)
	    ("M-s g" . consult-grep)
	    ("M-s k" . consult-keep-lines)
	    ("M-s l" . consult-locate)
	    ("M-s m" . consult-multi-occur)
	    ("M-s r" . consult-ripgrep)
	    ("M-s u" . consult-focus-lines)
	    ("M-s f" . consult-find))
    :custom
    (completion-in-region-function #'consult-completion-in-region)
    (consult-narrow-key "<")
    (consult-project-root-function #'projectile-project-root)
    ;; Provides consistent display for both `consult-register' and the register
    ;; preview when editing registers.
    (register-preview-delay 0)
    (register-preview-function #'consult-register-preview))
#+end_src
* Programming
** LSP
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure t
    :init
    (setq lsp-keymap-prefix "C-c l")
    :commands lsp lsp-deferred
    :custom
    (lsp-enable-snippet nil)
					  ; rust
    (lsp-rust-analyzer-cargo-watch-command "clippy")
    (lsp-eldoc-render-all t)
    (lsp-idle-delay 0.6)
    (lsp-rust-analyzer-server-display-inlay-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
    (lsp-rust-analyzer-display-chaining-hints t)
    (lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names t)
    (lsp-rust-analyzer-display-closure-return-type-hints t)
    (lsp-rust-analyzer-display-parameter-hints t)
    (lsp-rust-analyzer-display-reborrow-hints t)
    :config
    (add-hook 'lsp-mode-hook 'lsp-ui-mode)
    )
#+end_src
** LSP-UI
#+begin_src emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after lsp
    :commands lsp-ui-mode
    :hook (lsp-mode . lsp-ui-mode)
	:config
	(setq lsp-ui-sideline-enable t)
	(setq lsp-ui-sideline-show-hover t)
	(setq lsp-ui-doc-position 'bottom)
	(lsp-ui-peek-always-show t)
	;; lsp config stuff
	(setq lsp-enable-links t)
	(setq lsp-signature-render-documentation t)
	(setq lsp-headerline-breadcrumb-enable t)
	(setq lsp-ui-doc-enable t)
	(setq lsp-completion-enable-additional-text-edit nil)
	(setq web-mode-enable-current-element-highlight t)
	(lsp-ui-doc-show)		
    )
#+end_src
** LSP-Consult
#+begin_src emacs-lisp
  (use-package consult-lsp
    :commands (consult-lsp-diagnostics consult-lsp-symbols))
#+end_src
** Auto-Completions
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.5)
    (setq company-minimum-prefix-length 1)
  
    (add-hook 'after-init-hook 'global-company-mode)
    )

  (use-package yasnippet
    :ensure t
    :config
    (yas-reload-all)
    (add-hook 'prog-mode-hook 'yas-minor-mode)
    (add-hook 'text-mode-hook 'yas-minor-mode))

  (defun company-yasnippet-or-completion ()
    (interactive)
    (or (do-yas-expand)
	(company-complete-common)))

  (defun check-expansion ()
    (save-excursion
      (if (looking-at "\\_>") t
	(backward-char 1)
	(if (looking-at "\\.") t
	  (backward-char 1)
	  (if (looking-at "::") t nil)))))

  (defun do-yas-expand ()
    (let ((yas/fallback-behavior 'return-nil))
      (yas/expand)))

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
	(minibuffer-complete)
      (if (or (not yas/minor-mode)
	      (null (do-yas-expand)))
	  (if (check-expansion)
	      (company-complete-common)
	    (indent-for-tab-command)))))
#+end_src
** Indentations
Let's use the =aggressive indentations= package
#+begin_src emacs-lisp
(use-package aggressive-indent
  :custom (aggressive-indent-comments-too t))
#+end_src
** Languages Specific Settings
*** Elisp (emacs-lisp)
**** Indentations
#+begin_src emacs-lisp
  (add-hook
   'emacs-lisp-mode-hook #'aggressive-indent-mode
   )
#+end_src
**** Parenthesis
Do not use [[https://www.emacswiki.org/emacs/AutoFillMode][Auto Fill Mode]] for Lisp mode:
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-off-auto-fill)
#+END_SRC

When editing code that uses parenthesis, enabling this does highlight
the matching parenthesis:
#+BEGIN_SRC emacs-lisp
(show-paren-mode t)
#+END_SRC

Enable electric pairs
#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src
*** YML
#+begin_src emacs-lisp
  (use-package yaml-mode
  :delight "ψ"
  :hook (yaml-mode . lsp-deferred)
  :mode ("\\.\\(yaml\\|yml\\)\\'"))
#+end_src
*** Dockerfile
#+begin_src emacs-lisp
  (use-package dockerfile-mode :delight "δ" :mode "Dockerfile\\'")
#+end_src
*** Terraform
#+begin_src emacs-lisp
  (
   use-package terraform-mode :mode ("\\.\\(tf\\|tfvars\\)\\'")
   :custom
   (terraform-indent-level 4))
#+end_src
*** Rust
**** COMMENT Rustic
`Rustic` is an extension of `rust-mode`
#+begin_src emacs-lisp

  (use-package rustic
    :ensure t
    (setq rustic-format-on-save t)
    (add-hook 'rustic-mode-hook 'rk/rustic-mode-hook))

  (defun rk/rustic-mode-hook ()
    (when buffer-file-name
      (setq-local buffer-save-without-query t)))
#+end_src

** Kubernetes
Let's use kubernetes-el to manage kubernetes cluster with Emacs
#+begin_src emacs-lisp
  (use-package kubernetes
    :ensure t
    :commands (kubernetes-overview))

  ;; If you want to pull in the Evil compatibility package.
  (use-package kubernetes-evil
    :ensure t
    :after kubernetes)

  (fset 'k8s 'kubernetes-overview)
#+end_src
** Documentation
#+begin_src emacs-lisp
  (use-package helpful
    :commands (helpful-at-point
	       helpful-callable
	       helpful-command
	       helpful-function
	       helpful-key
	       helpful-macro
	       helpful-variable)
    :bind
    ([remap display-local-help] . helpful-at-point)
    ([remap describe-function] . helpful-callable)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-symbol] . helpful-symbol)
    ([remap describe-key] . helpful-key)
    ([remap describe-command] . helpful-command))
#+end_src
** Projects
#+begin_src emacs-lisp
  (use-package projectile
    :diminish (projectile-mode)
    :custom
    (projectile-enable-caching t)
    (projectile-keymap-prefix (kbd "C-c C-p"))
    (projectile-mode-line '(:eval (projectile-project-name)))
    (projectile-project-search-path '("~/Projects"))
    :config (projectile-global-mode))

  (use-package consult-projectile
    :after (consult projectile)
    :straight (consult-projectile :type git :host gitlab :repo
				  "OlMon/consult-projectile" :branch "master")
    :commands (consult-projectile))

  (use-package ibuffer-projectile
    :after ibuffer
    :preface
    (defun my/ibuffer-projectile ()
      (ibuffer-projectile-set-filter-groups)
      (unless (eq ibuffer-sorting-mode 'alphabetic)
	(ibuffer-do-sort-by-alphabetic))))
#+end_src
* Helper functions
** lp-buffer-exists(bufname)
Checks wether or not a buffer exists
#+begin_src emacs-lisp
  (defun lp-buffer-exists (bufname)
    (not  (eq nil (get-buffer bufname)))
    )
#+end_src
* Ledger
Ledger is a tool used to track money, using a double entry accounting system. Let's give it a shot
** Emacs Setup
#+begin_src emacs-lisp
  (use-package ledger-mode
    :mode ("\\.\\(dat\\)\\'")
    :preface
    (defun lp/ledger-save ()
      "Clear the ledger buffer at each save."
      (interactive)
      (ledger-mode-clean-buffer)
      (save-buffer))
    :bind (:map ledger-mode-map
		("C-x C-s" . lp/ledger-save))
    :hook (leder-mode . ledger-flymake-enable)
    :custom
    ;;(ledger-clear-whole-transactions t)
    (ledger-reconcile-default-commodity "€")
    (ledger-post-amount-alignment-column 65)
    (ledger-reports
     '(("account statement" "%(binary) reg --real --pedantic -f ~/org/ledger/ledger.dat ^%(account)")
       ("balance sheet" "%(binary) --real --pedantic -f ~/org/ledger/ledger.dat bal ^Assets ^Liabilities ^equity --depth 3"))
     (ledger-report-use-header-line nil)))  
#+end_src
* Org mode
** Load Orgmode
#+begin_src emacs-lisp
  (straight-use-package 'org)
  (use-package org
    :ensure org-contrib)
#+end_src
** Start Configuration
This section deals with profiling and debugging start of the configuration
#+begin_src emacs-lisp
  (defvar lp-org-config-start-time (current-time) "Time when org-mode config was started")
  (message "★→ Org-mode")
#+end_src
** General Configuration
*** Org File Path
#+begin_src emacs-lisp
  (setq lp-org-files-path "~/org/")
#+end_src
*** Assign file extensions to Org-mode
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode)) 
#+end_src
*** Associate file without an auto-mode alist entry to =org-mode=
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("'" . org-mode) t)
#+end_src
*** Enable Clean View
=Clean View= allows org mode to use indentation to separate headings levels
#+begin_src org
  
#+end_src
*** Nice looking bullets for headings
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook  (lambda () (org-bullets-mode 1)))
    )
#+end_src
*** Enhanced highlighting of Babel Blocks
#+begin_src emacs-lisp
  (defface org-block
    '((t (:background "#1a1a1a")))
    "Face used for the source block blackground.")
#+end_src
*** TOC
Automatically uip[date the table of contentes of a =.org= files. Only need to add =:TOC= tag to the first heading of these table of contents
#+begin_src emacs-lisp
  (use-package toc-org
    :after org
    :hook (org-mode . toc-org-enable)
    )
#+end_src
*** Todo Keywords and Faces
**** Keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords '((sequence "TODO(t)" "STARTED(s)" "WAITING(w@/!)" "SOMEDAY(S!)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")))
#+end_src
**** Faces
#+begin_src emacs-lisp
  (setq org-todo-keyword-faces
      (quote (("TODO"      :foreground "lightblue"    :weight bold)
	      ("STARTED"   :foreground "red"          :weight bold)
	      ("WAITING"   :foreground "orange"       :weight bold)
	      ("DONE"      :foreground "forest green" :weight bold)
	      ("SOMEDAY"   :foreground "magenta"      :weight bold)
	      ("CANCELLED" :foreground "forest green" :weight bold))))
#+end_src
*** KeyBinding
**** Linking
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c C-l") 'org-insert-link)
#+end_src
** Contacts
#+begin_src emacs-lisp
  (use-package org-contacts
    :after org
    :ensure nil
    :custom
    (org-contacts-address-property "CITY")
    (org-contacts-birthday-property "BIRTHDAY")
    (org-contacts-files (list (concat lp-org-files-path "contacts.org")))
    )
#+end_src
** Agenda
**** Agenda Files
***** Work files
#+begin_src emacs-lisp
  (setq lp-work-agenda-files (append ` (
					,(concat lp-org-files-path "fmsc.org")
					)))
#+end_src
***** Non work Files
#+begin_src emacs-lisp
  (setq lp-non-work-agenda-files ( append ` (
					     ,(concat lp-org-files-path "inbox.org")
					     ,(concat lp-org-files-path "tickler.org")
					     ,(concat lp-org-files-path "misc.org")
					     ,(concat lp-org-files-path "projects.org")
					     ,(concat lp-org-files-path "notes.org")
					     ,(concat lp-org-files-path "contacts.org")
					     ,(concat lp-org-files-path "agenda/calendar.org")
					     ,(concat lp-org-files-path "agenda/work.org")
					     ,(concat lp-org-files-path "agenda/routine.org")
					     ,(concat lp-org-files-path "agenda/review.org")
					     ,(concat lp-org-files-path "agenda/people.org")
					     ,(concat lp-org-files-path "agenda/organizer.org")
					     )))
#+end_src
***** All Agenda Files
 #+begin_src emacs-lisp
  (setq org-agenda-files (append lp-work-agenda-files lp-non-work-agenda-files))
 #+end_src
**** Settings
***** Agenda Groups
#+begin_src emacs-lisp
  (setq  org-agenda-compact-blocks  t)
#+end_src
***** Compact Agenda view
#+begin_src emacs-lisp :tangle no
  (setq  org-agenda-compact-blocks  t)
#+end_src
**** Helper functions
***** super-agenda
#+begin_src emacs-lisp
  (use-package org-super-agenda
    :ensure t
    :config
    (org-super-agenda-mode)
    (setq super-agenda-groups
	  '(
	    (:name "Today" :time-grid t)
	    )
	  ))

  (global-set-key (kbd "C-c a") #'org-agenda)

  (defun lp-super-agenda()
    "generates my super-agenda"
    (interactive)
    (org-super-agenda-mode)
    (let
	((org-super-agenda-groups super-agenda-groups))
      (org-agenda nil "a")
      )
    )

  (defun lp-org-agenda (&optional arg)
    "Opens the already opened agenda or opens new one instead. With
     universal prefix, use business agenda."
    (interactive "P")
    (setq lp-org-agenda-start-time (current-time))

    (setq lp-org-agenda-tags-column (- (- (window-total-width) 3)))
    (setq org-agenda-tags-column lp-org-agenda-tags-column) ;; total width minus 3

    (if (lp-buffer-exists "*Org Agenda*")
	(switch-to-buffer "*Org Agenda*")
      (progn
	(lp-super-agenda)

	(setq current-timestamp
	      (concat
	       (format-time-string "%Y-%m-%dT%T")
	       ((lambda (x) (concat (substring x 0 3) ":" (substring x 3 5)))
		(format-time-string "%z"))))
	(when (> (string-to-number (emacs-uptime "%m")) 2) ;; only flash when not part of the boot process (= Emacs runs longer than 2 minutes)
	  (my-flash (format-message "Agenda built.\n(took %.2fs)" (float-time (time-subtract (current-time) lp-org-agenda-start-time))))
	  )
	(lp-log (format-message "my-org-agenda took %.2fs" (float-time (time-subtract (current-time) lp-org-agenda-start-time))))

	)
      )
    )

#+end_src
** Refilling
*** Target should includes any file contributing to the agenda
#+begin_src emacs-lisp
  (setq org-refile-targets (quote (
				   (lp-work-agenda-files :maxlevel . 4)
				   (lp-non-work-agenda-files :maxlevel . 4)
				   )))
#+end_src
*** Target should start with file name
#+begin_src emacs-lisp
  (setq org-refile-use-outline-path (quote file))
#+end_src
*** Activate Caching of targets
#+begin_src emacs-lisp
  (setq org-refile-use-cache t)
#+end_src
*** Targets complete directly with IDO
#+begin_src emacs-lisp
  (setq org-outline-path-complete-in-steps nil)
#+end_src
*** Allow refile to create parent tasks with confirmation
#+begin_src emacs-lisp
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
#+end_src
** Blogging
Let's give a try to org-mode for blogging
#+begin_src emacs-lisp
  (use-package ox-hugo
    :ensure t
    :after ox)
#+end_src
** End Configuration
#+begin_src emacs-lisp
  (message "→★ orgmode finished in %.2fs" (float-time (time-subtract (current-time) lp-org-config-start-time)))
#+end_src
* Capture
Capture is used for template management
#+begin_src emacs-lisp
  (use-package org-capture
    :ensure nil
    :after org
    :preface
    (defvar lp/org-ledger-visa-template "%(org-read-date) %^{Payee}
      Expenses:%^{Account}  %^{Amount} EUR
      Liabilities:Visa:Postula Conceptions:Main  %^{Amount} EUR" "Template for credit card transaction with ledger.")
    :custom
    (org-capture-templates
     `(("l" "Ledger")
       ("lv" "Visa" plain (file ,(format "~/org/ledger/ledger-%s.dat" (format-time-string "%Y"))),
	lp/org-ledger-visa-template
	:empty-lines 1
	:immediate-finish t)
       ("t" "Todo [inbox]" entry
	(file+headline "~/org/inbox.org" "Tasks")
	"* TODO %i%?")
       ("T" "Tickler" entry
	(file+headline "~/org/tickler.org" "Tickler")
	"* %i%? \n %U")
       )))

  (global-set-key (kbd "C-c c") #'org-capture)
#+end_src
* Email
#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :hook (mu4e-compose-mode . turn-off-auto-fill)
    :bind (:map mu4e-headers-mode-map
		("M-[" . scroll-down-command)
		("M-]" . scroll-up-command))
    )
#+end_src
* Hydra
Hydra allows you to create menu for mode
#+begin_src emacs-lisp
  (use-package hydra
    :bind(
	  ("C-c f" . hydra-flycheck/body)
	  ("C-c l" . hydra-ledger/body)
	  ("C-c g" . hydra-go-to-file/body)
	  ("C-c o" . hydra-org/body)
	  ("C-c p" . hydra-projectile/body)
	  ("C-c w" . hydra-windows/body)
	  )
    )


  (use-package major-mode-hydra
    :after hydra
    :preface
    (defun with-alltheicon (icon str &optional height v-adjust face)
      "Display an icon from all-the-icon."
      (s-concat (all-the-icons-alltheicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-faicon (icon str &optional height v-adjust face)
      "Display an icon from Font Awesome icon."
      (s-concat (all-the-icons-faicon icon ':v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-fileicon (icon str &optional height v-adjust face)
      "Display an icon from the Atom File Icons package."
      (s-concat (all-the-icons-fileicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str))

    (defun with-octicon (icon str &optional height v-adjust face)
      "Display an icon from the GitHub Octicons."
      (s-concat (all-the-icons-octicon icon :v-adjust (or v-adjust 0) :height (or height 1) :face face) " " str)))
#+end_src
** Hydra / Flycheck
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-flycheck
		       (:hint nil :color teal :quit-key "q" :title (with-faicon "plane" "Flycheck" 1 -0.05))
		       ("Checker"
			(("?" flycheck-describe-checker "describe")
			 ("d" flycheck-disable-checker "disable")
			 ("m" flycheck-mode "mode")
			 ("s" flycheck-select-checker "select"))
			"Errors"
			(("<" flycheck-previous-error "previous" :color pink)
			 (">" flycheck-next-error "next" :color pink)
			 ("f" flycheck-buffer "check")
			 ("l" flycheck-list-errors "list"))
			"Other"
			(("M" flycheck-manual "manual")
			 ("v" flycheck-verify-setup "verify setup"))))
#+end_src
** Hydra / Goto Files
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-go-to-file
    (:hint nil :color teal :quit-key "q" :title (with-octicon "file-symlink-file" "Go To" 1 -0.05))
    ("Agenda"
     (("ac" (find-file "~/.org/agenda/contacts.org") "contacts")
      ("ai" (find-file "~/org/agenda/inbox.org") "inbox")
      ("af" (find-file "~/org/fmsc.org") "fmsc"))
     "Blog"
     (("bm" (find-file "~/org/blog/blog.org") "main"))
     "Config"
     (("ce" (find-file "~/.emacs.d/config.org") "emacs"))
     "Ledger"
     (("lm" (find-file "~/org/ledger/ledger.dat") "main")
     ("lc" (find-file "~/org/ledger/ledger-2022.dat") "current"))
     "Other"
     (("ob" (find-file "~/org/other/books.org") "book"))))
#+end_src
** Hydra / Windows
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-windows
    (:hint nil :forein-keys warn :quit-key "q" :title (with-faicon "windows" "Windows" 1 -0.05))
    ("Window"
     (("b" balance-windows "balance")
      ("i" enlarge-window "heighten")
      ("j" shrink-window-horizontally "narrow")
      ("k" shrink-window "lower")
      ("u" winner-undo "undo")
      ("r" winner-redo "redo")
      ("l" enlarge-window-horizontally "widen")
      ("s" switch-window-then-swap-buffer "swap" :color teal))
     "Zoom"
     (("-" text-scale-decrease "out")
      ("+" text-scale-increase "in")
      ("=" (text-scale-increase 0) "reset"))))
#+end_src
** Hydra / Org
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-org
    (:hint nil :color teal :quit-key "q" :title (with-fileicon "org" "Org" 1 -0.05))
    ("Action"
     (("A" my/org-archive-done-tasks "archive")
      ("a" org-agenda "agenda")
      ("c" org-capture "capture")
      ("d" org-decrypt-entry "decrypt")
      ("i" org-insert-link-global "insert-link")
      ("j" my/org-jump "jump-task")
      ("k" org-cut-subtree "cut-subtree")
      ("o" org-open-at-point-global "open-link")
      ("r" org-refile "refile")
      ("s" org-store-link "store-link")
      ("t" org-show-todo-tree "todo-tree"))))
#+end_src
** Hydra / Projectile
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-projectile
    (:hint nil :color teal :quit-key "q" :title (with-faicon "rocket" "Projectile" 1 -0.05))
    ("Buffers"
     (("b" projectile-switch-to-buffer "list")
      ("k" projectile-kill-buffers "kill all")
      ("S" projectile-save-project-buffers "save all"))
     "Find"
     (("d" projectile-find-dir "directory")
      ("D" projectile-dired "root")
      ("f" projectile-find-file "file")
      ("p" consult-projectile "project"))
     "Other"
     (("i" projectile-invalidate-cache "reset cache"))
     "Search"
     (("r" projectile-replace "replace")
      ("R" projectile-replace-regexp "regexp replace")
      ("s" counsel-ripgrep "search"))))
#+end_src
** Hydra / Ledger
#+begin_src emacs-lisp
  (pretty-hydra-define hydra-ledger
  (:hint nil :color teal :quit-key "q" :title (with-faicon "usd" "Ledger" 1 -0.05))
  ("Action"
   (("b" ledger-add-transaction "add")
    ("c" ledger-mode-clean-buffer "clear")
    ("i" ledger-copy-transaction-at-point "copy")
    ("s" ledger-delete-current-transaction "delete")
    ("r" ledger-report "report"))))
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :custom
  (dashboard-banner-logo-title "With Great Power Comes Great Responsibility!")
  (dashboard-center-content t)
  (dashboard-items '((agenda)
                     (projects . 5)))
  (dashboard-projects-switch-function 'counsel-projectile-switch-project-by-name)
  (dashboard-set-file-icons t)
  (dashboard-set-footer nil)
  (dashboard-set-heading-icons t)
  (dashboard-set-navigator t)
  (dashboard-startup-banner 'logo)
  :config (dashboard-setup-startup-hook))
  #+end_src
* Autostart
At the end of the configuration, let's execute some things
#+begin_src emacs-lisp
  (message "→★ finished loading config.org (w/o autostart) in %.2fs" (float-time (time-subtract (current-time) lp-config-el-start-time)))

  (lp-log "Interactive Emacs is started")

  (message "Creating agenda...")

  ;(lp-org-agenda)
#+end_src
* Closing and end for profiling
This is the end of the elisp blocks to be tangled. Finishing up loading the configuration:
#+begin_src emacs-lisp
  (setq lp-config-el-loading-time (float-time (time-subtract (current-time) lp-config-el-start-time)))
  (my-flash (format-message "Not found here:\n%s" lp-binary-not-found-list))
  (my-flash (format-message "Emacs boot finished\n(took %.2fs)" lp-config-el-loading-time))
  (message "»»» Binaries not found in checks above: %s" lp-binary-not-found-list)
  (message "→★ finished loading config.org in %.2fs" lp-config-el-loading-time)
#+end_src
